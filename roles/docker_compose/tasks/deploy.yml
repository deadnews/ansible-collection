---
# Deploy Docker Compose project

- name: Create directory for the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.file:
    path: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    state: directory
    mode: "0700"

- name: Create files in the Docker Compose project {{ docker_compose_project }}
  when: docker_compose_files | default([]) | length > 0
  block:
    - name: Template files in the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default(item.src | basename | split('.j2') | first) }}"
        mode: "{{ item.mode | default('0644') }}"
        validate: "{{ item.validate | default('') }}"
      loop: "{{ docker_compose_files }}"
      notify:
        - (Handler) Down the Docker Compose project containers
      when:
        - item.src.endswith('.j2')

    - name: Copy files in the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default(item.src | basename) }}"
        mode: "{{ item.mode | default('0644') }}"
        directory_mode: "{{ item.directory_mode | default('0755') }}"
        validate: "{{ item.validate | default('') }}"
      loop: "{{ docker_compose_files }}"
      notify:
        - (Handler) Down the Docker Compose project containers
      when:
        - not item.src.endswith('.j2')

    - name: Validate the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.command:
        cmd: docker compose config
        chdir: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
      changed_when: false
      register: docker_compose_config_output

    - name: Show files in the Docker Compose project {{ docker_compose_project }}
      when: docker_compose_files_show | default(false) | bool
      block:
        - name: Show the Docker Compose project in canonical format
          ansible.builtin.debug:
            var: docker_compose_config_output.stdout

        - name: List files in the Docker Compose project {{ docker_compose_project }}
          ansible.builtin.command:
            cmd: ls -lha "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
          changed_when: false
          register: docker_compose_ls_output

        - name: Show files in the Docker Compose project {{ docker_compose_project }}
          ansible.builtin.debug:
            var: docker_compose_ls_output.stdout

- name: Get container names
  when: docker_compose_containers_check | default(true) | bool
  block:
    - name: Get Docker Compose configuration
      ansible.builtin.command:
        cmd: docker compose config --format json
        chdir: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
      changed_when: false
      register: docker_compose_config_json

    - name: Parse configuration and get container names
      ansible.builtin.set_fact:
        docker_compose_container_names: >-
          {{
            (docker_compose_config_json.stdout | from_json).services
            | dict2items
            | map(attribute='value.container_name')
            | select('defined')
            | list
          }}

- name: Inspect images for containers before pull
  when: docker_compose_container_names | default([]) | length > 0
  ansible.builtin.command:
    cmd: docker inspect -f {%raw%}'{{.Config.Image}}'{%endraw%} {{ item }}
  loop: "{{ docker_compose_container_names }}"
  register: docker_compose_images_before
  changed_when: false
  failed_when: false

- name: Pull images for the Docker Compose project {{ docker_compose_project }}
  community.docker.docker_compose_v2_pull:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    policy: always
  notify:
    - (Handler) Down the Docker Compose project containers

- name: Flush handlers after deployment
  ansible.builtin.meta: flush_handlers

- name: Up the Docker Compose project containers ー {{ docker_compose_project }}
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    pull: never
    recreate: auto
    state: present
  register: docker_compose_up_output

- name: Show results for docker compose up ー {{ docker_compose_project }}
  ansible.builtin.debug:
    var: docker_compose_up_output.stderr

- name: Sleep for a specified time
  when: docker_compose_sleep_time | default(0) | int > 0
  ansible.builtin.wait_for:
    timeout: "{{ docker_compose_sleep_time }}"

- name: Show Docker Compose logs
  when: docker_compose_logs | default(false) | bool
  block:
    - name: Get Docker Compose logs
      ansible.builtin.command:
        cmd: docker compose logs
        chdir: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
      changed_when: false
      register: docker_compose_logs_output

    - name: Show Docker compose logs
      ansible.builtin.debug:
        var: docker_compose_logs_output.stdout

- name: Execute command in running Docker containers
  when: docker_compose_containers_exec | default([]) | length > 0
  block:
    - name: Execute command in Docker containers
      community.docker.docker_container_exec:
        container: "{{ item.container }}"
        command: "{{ item.cmd }}"
      changed_when: false
      register: docker_compose_containers_exec_output
      loop: "{{ docker_compose_containers_exec }}"

    - name: Show exec results ー {{ docker_compose_project }}
      ansible.builtin.debug:
        msg:
          rc: "{{ item.rc }}"
          stderr: "{{ item.stderr }}"
          stdout: "{{ item.stdout }}"
      loop: "{{ docker_compose_containers_exec_output.results }}"
      loop_control:
        label: "{{ item.item.container }} - {{ item.item.cmd }}"

- name: Ensure that Docker containers are running and healthy
  when: docker_compose_container_names | default([]) | length > 0
  block:
    - name: Ensure that Docker container is running ー {{ docker_compose_project }}
      ansible.builtin.command:
        cmd: docker inspect -f {%raw%}'{{.State.Running}}'{%endraw%} {{ item }}
      changed_when: false
      register: docker_compose_running_verify
      retries: 12
      delay: 5
      until: docker_compose_running_verify.stdout == 'true'
      loop: "{{ docker_compose_container_names }}"

    - name: Ensure that Docker container is healthy ー {{ docker_compose_project }}
      ansible.builtin.command:
        cmd: docker inspect -f {%raw%}'{{if .State.Health}}{{.State.Health.Status}}{{else}}no health check{{end}}'{%endraw%} {{ item }}
      changed_when: false
      register: docker_compose_healthy_verify
      retries: "{{ docker_compose_containers_check_retries | default(24) }}"
      delay: 5
      until: >-
        docker_compose_healthy_verify.stdout == 'healthy' or
        docker_compose_healthy_verify.stdout == 'no health check'
      loop: "{{ docker_compose_container_names }}"

    - name: Show container health status ー {{ docker_compose_project }}
      ansible.builtin.debug:
        msg: "{{ item.stdout }}"
      loop: "{{ docker_compose_healthy_verify.results }}"
      loop_control:
        label: "{{ item.item }}"

- name: Check containers volumes ー {{ docker_compose_project }}
  when: docker_compose_container_names | default([]) | length > 0
  block:
    - name: Inspect volumes for containers
      ansible.builtin.command:
        cmd: docker inspect -f {%raw%}'{{json .Mounts}}'{%endraw%} {{ item }}
      loop: "{{ docker_compose_container_names }}"
      register: docker_compose_mounts_inspect
      changed_when: false
      failed_when: false

    - name: Show volumes for containers
      ansible.builtin.debug:
        msg: |
          {% for idx in range(docker_compose_container_names | length) %}
          {% set mounts = docker_compose_mounts_inspect.results[idx].stdout | default('[]') | from_json %}
          {% set vols = mounts | selectattr('Type', 'equalto', 'volume') | list %}
          {% if vols | length > 0 %}
          Container: {{ docker_compose_container_names[idx] }}
          {% for v in vols %}
          Volume:    {{ v.Name | default('') }}	→ {{ v.Destination | default('') }}
          {% endfor %}
          ---
          {% endif %}
          {% endfor %}

- name: Inspect images for containers after pull
  when: docker_compose_container_names | default([]) | length > 0
  block:
    - name: Inspect images for containers after pull
      ansible.builtin.command:
        cmd: docker inspect -f {%raw%}'{{.Config.Image}}'{%endraw%} {{ item }}
      loop: "{{ docker_compose_container_names }}"
      register: docker_compose_images_after
      changed_when: false

    - name: Set image changed flag
      ansible.builtin.set_fact:
        docker_compose_image_changed: >-
          {{
            (docker_compose_images_before.results | map(attribute='stdout') | list)
            !=
            (docker_compose_images_after.results | map(attribute='stdout') | list)
          }}

    - name: Show Docker image version changes
      changed_when: docker_compose_image_changed
      ansible.builtin.debug:
        msg: |
          {% for idx in range(docker_compose_container_names | length) %}
          Container: {{ docker_compose_container_names[idx] }}
          Old Image: {{ docker_compose_images_before.results[idx].stdout if docker_compose_images_before.results[idx].rc == 0 else 'None' }}
          New Image: {{ docker_compose_images_after.results[idx].stdout }}
          ---
          {% endfor %}
